#!/usr/bin/env bash
#
# Provision a new system with software and configuration files

# Where the magic happens.
export DOTFILES="$HOME/.dotfiles"

# Logging functions
e_header()   { echo -e "\n\033[1m$*\033[0m"; }
e_success()  { echo -e " \033[1;32m✔\033[0m  $*"; }
e_error()    { echo -e " \033[1;31m✖\033[0m  $*"; }
e_arrow()    { echo -e " \033[1;34m➜\033[0m  $*"; }

# OS detection
is_macos() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}
get_os() {
  for os in macos ubuntu; do
    "is_$os"; [[ $? == "${1:-0}" ]] && echo $os
  done
}

# Remove an entry from $PATH
# Based on http://stackoverflow.com/a/2108540/142339
path_remove() {
  local arg path
  path=":$PATH:"
  for arg in "$@"; do
    path="${path//:$arg:/:}"
  done
  path="${path%:}"
  path="${path#:}"
  echo "$path"
}

###########################################
# INTERNAL DOTFILES "INIT" VARS / FUNCTIONS
###########################################

__dotfiles::usage() {
  cat <<HELP
Usage: $(basename "$0")

See the README for documentation.
https://github.com/rgardner/dotfiles

Copyright (c) 2016 Bob Gardner
Licensed under the MIT license.
HELP
}

#######################################
# Globals:
#   None
# Arguments:
#   Restart, optional
#######################################
__dotfiles::setup() {
  if [ ! -d "$DOTFILES" ]; then
    # $DOTFILES directory doesn't exist? Clone it!
    export new_dotfiles_install=1
    e_header "Downloading dotfiles"
    git clone --recursive git@github.com:"${github_user:-rgardner}"/dotfiles.git "$DOTFILES"
    cd "$DOTFILES" || exit 1
  elif [ "$1" != "restart" ]; then
    # Make sure we have the latest files.
    e_header "Updating dotfiles"
    cd "$DOTFILES" || exit 1
    local prev_head
    prev_head="$(git rev-parse HEAD)"
    git pull
    git submodule update --init --recursive --quiet
    if [[ "$(git rev-parse HEAD)" != "$prev_head" ]]; then
      e_header "Changes detected, restarting script"
      exec "$0" "restart"
    fi
  fi

  # Add binaries into the path
  [[ -d $DOTFILES/bin ]] && PATH=$DOTFILES/bin:$PATH
  export PATH

  # Tweak file globbing.
  shopt -s dotglob
  shopt -s nullglob

  # Create caches dir and init subdir, if they don't already exist.
  mkdir -p "$DOTFILES/caches/init"

  # If backups are needed, this is where they'll go.
  backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
}

__dotfiles::install_git_hooks() {
  "$DOTFILES/git-hooks/install-hooks.sh"
}

__main() {
  # Exit script if it is being sourced.
  [[ "$1" == "source" ]] && return

  echo "dotfiles - Bob Gardner - http://www.bob-gardner.com"
  [[ "$1" == "-h" || "$1" == "--help" ]] && __dotfiles::usage && exit

  __dotfiles::setup "$@"
  __dotfiles::install_git_hooks

  # Alert if backups were made.
  [[ -n "${backup+x}" ]] && echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
  e_header "All done!"
}

__main "$@"
